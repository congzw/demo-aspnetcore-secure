@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using NbSites.Web.PermissionChecks
@inject IAuthenticationSchemeProvider AuthenticationSchemeProvider
@inject ICurrentUserContext UserContext
@{
    var defaultScheme = await AuthenticationSchemeProvider.GetDefaultAuthenticateSchemeAsync();
    var schemes = await AuthenticationSchemeProvider.GetAllSchemesAsync();
}

<hr />
<div class="row">
    <div class="col-sm-3">
        <h2>User.Identity</h2>
        <p>User.Identity.IsAuthenticated: @User.Identity.IsAuthenticated</p>
        <p>User.Identity.Name: @User.Identity.Name</p>
    </div>
    <div class="col-sm-3">
        <h2>CurrentUserContext</h2>
        <p>IsLogin: @UserContext.IsLogin()</p>
        <p>User: @UserContext.User</p>
        <p>Roles: @UserContext.Roles.MyJoin()</p>
        <p>Claims Types: </p>
        <ul>
            @foreach (var item in UserContext.Claims)
            {
                <li>@item.GetShortTypeName() : <span>@item.Value</span></li>
            }
        </ul>
    </div>
    <div class="col-sm-3">
        <h2>Schemes</h2>
        @foreach (var scheme in schemes)
        {
            var authenticateResult = await this.Context.AuthenticateAsync(scheme.Name);
            var style = scheme.Name == defaultScheme.Name ? "color:red" : "";
            <div>
                <p style="@style">
                    @scheme.Name @(string.IsNullOrWhiteSpace(style) ? "" : " <-- Default Scheme!")
                </p>
                <p>HandlerType: @scheme.HandlerType</p>
                <p>IsAuthenticated: @authenticateResult.Principal?.Identity?.IsAuthenticated</p>
                <p>Identity Name: @authenticateResult.Principal?.Identity?.Name</p>
            </div>
        }
    </div>
</div>